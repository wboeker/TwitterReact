{"version":3,"sources":["Tweet/Tweet.jsx","TweetForm/TweetForm.jsx","Config/firebase.js","App.js","serviceWorker.js","index.js"],"names":["Tweet","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tweetContent","tweetId","username","timeStamp","id","removeTweet","_this2","react_default","a","createElement","className","onClick","handleremoveTweet","Component","TweetForm","state","newTweetContent","filterUser","handleUserInput","bind","assertThisInitialized","changeUser","handleFilter","writeTweet","filterByUser","e","setState","target","value","i","d","Date","getMonth","getDate","getFullYear","addZero","getHours","getMinutes","getSeconds","user","filterTweets","date","constructDate","content","displayName","addTweet","placeholder","onChange","disabled","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","provider","auth","GoogleAuthProvider","App","seeUsers","login","logout","app","database","ref","child","tweets","usersVisible","signOut","then","_this3","signInWithPopup","result","_this4","previousTweets","on","snap","unshift","key","val","length","splice","tweet","time","push","set","remove","name","window","location","listUsers","Set","_this5","query","queryString","parse","search","setUsers","constructUsers","Array","from","map","src_Tweet_Tweet","helper","src_TweetForm_TweetForm","setUser","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2c7f4c6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Tweet.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Tweet extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    //passing parameters\r\n    this.tweetContent = props.tweetContent;\r\n    this.tweetId = props.tweetId;\r\n    this.username = props.username;\r\n    this.timeStamp = props.timeStamp;\r\n  }\r\n\r\n  handleremoveTweet(id){\r\n    this.props.removeTweet(id);\r\n  }\r\n\r\n  render(props){\r\n      return(\r\n        <div className=\"note fade-in\">\r\n          <div className=\"buttonContainer\">\r\n            <div className=\"makeRight\">\r\n              <span className=\"closebtn\"\r\n                  onClick={() => this.handleremoveTweet(this.tweetId)}>\r\n                  &times;\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div className=\"utContainer\">\r\n            <div className=\"userBox\">\r\n              <p className=\"userDisplay\">User: {this.username}</p>\r\n            </div>\r\n            <div className=\"timeBox\">\r\n              <p className=\"timeStamp\"> {this.timeStamp}</p>\r\n            </div>\r\n          </div>\r\n            <p className=\"tweetContent\">{this.tweetContent}</p>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\n//set parameter type\r\nTweet.propTypes = {\r\n  tweetContent:PropTypes.string,\r\n  username:PropTypes.string\r\n}\r\n\r\nexport default Tweet;\r\n","import React, { Component } from 'react';\r\nimport './TweetForm.css';\r\n\r\nclass TweetForm extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      newTweetContent: '',\r\n      username: '',\r\n      timeStamp: '',\r\n      filterUser: ''\r\n    };\r\n    this.handleUserInput = this.handleUserInput.bind(this);//binds this to the component\r\n    this.changeUser = this.changeUser.bind(this);\r\n    this.handleFilter = this.handleFilter.bind(this);\r\n    this.writeTweet = this.writeTweet.bind(this);\r\n    this.filterByUser = this.filterByUser.bind(this);\r\n  }\r\n\r\n  // When the user input changes, set the newTweetContent\r\n  //to the value of what's in the input box\r\n  handleUserInput(e){\r\n    this.setState({\r\n      newTweetContent: e.target.value, //the value of the text input\r\n    })\r\n  }\r\n\r\n  changeUser(e){\r\n    this.setState({\r\n      username: e.target.value, //the value of the text input\r\n    })\r\n  }\r\n\r\n  handleFilter(e){\r\n    this.setState({\r\n      filterUser: e.target.value, //the value of the text input\r\n    })\r\n  }\r\n\r\n  addZero(i) {\r\n    if (i < 10) {\r\n      i = \"0\" + i;\r\n    }\r\n    return i;\r\n  }\r\n\r\n  constructDate() {\r\n    var d = new Date();\r\n    var now = new Date();\r\n    var x = \"\";\r\n    var dmy = (d.getMonth() + 1) + \"/\" + d.getDate() + \"/\" + d.getFullYear();\r\n    var h = this.addZero(d.getHours());\r\n    var m = this.addZero(d.getMinutes());\r\n    var s = this.addZero(d.getSeconds());\r\n    x = dmy + \" \" + h + \":\" + m + \":\" + s;\r\n    return x;\r\n  }\r\n\r\n  filterByUser(){\r\n    const user = this.state.filterUser;\r\n    this.props.filterTweets(user);\r\n  }\r\n\r\n  writeTweet(){\r\n    // call a method that sets the tweetContent for a note to\r\n    // the value of the input\r\n    const date = this.constructDate();\r\n    const content = this.state.newTweetContent;\r\n    const username = this.props.username ? this.props.username.displayName : \"\";\r\n\r\n    this.props.addTweet(content,username,date);\r\n    //set newTweetContent back to an empty string (after onclick takes place)\r\n    this.setState({\r\n      newTweetContent: '',\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"formWrapper\">\r\n        <input className=\"filterInput\"\r\n        placeholder=\"filter by user\"\r\n        value={this.state.filterUser}\r\n        onChange={this.handleFilter}/>\r\n\r\n        <button className=\"filterButton\"\r\n        onClick={this.filterByUser}>Filter</button>\r\n\r\n        <input className=\"tweetInput\"\r\n        placeholder=\"Write a new tweet...\"\r\n        value={this.state.newTweetContent}\r\n        onChange={this.handleUserInput}/>\r\n\r\n        <button className=\"tweetButton\"\r\n        onClick={this.writeTweet} disabled={!this.props.username}>Tweet</button>\r\n      </div>\r\n    )\r\n  }\r\n  }\r\n\r\n  export default TweetForm;\r\n","import firebase from 'firebase'\r\n// import 'firebase/database';\r\nimport 'firebase/database';\r\n\r\n// Initialize Firebase\r\nexport const DB_CONFIG = {\r\n    apiKey: \"AIzaSyDjkCphKdKAvmdMEkUK8UY9fuDMpDghdXk\",\r\n    authDomain: \"react-twitter-3a113.firebaseapp.com\",\r\n    databaseURL: \"https://react-twitter-3a113.firebaseio.com\",\r\n    projectId: \"react-twitter-3a113\",\r\n    storageBucket: \"react-twitter-3a113.appspot.com\",\r\n    messagingSenderId: \"952075446154\"\r\n  };\r\n\r\n  firebase.initializeApp(DB_CONFIG);\r\n  // auth here\r\n  export const provider = new firebase.auth.GoogleAuthProvider();\r\n  export const auth = firebase.auth();\r\n\r\n  export default firebase;\r\n","import React, { Component } from 'react';\r\nimport Tweet from './Tweet/Tweet';\r\nimport TweetForm from './TweetForm/TweetForm';\r\nimport firebase, { auth, provider } from './Config/firebase.js';\r\nimport './App.css';\r\nimport queryString from 'query-string';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.addTweet = this.addTweet.bind(this);\r\n    this.removeTweet = this.removeTweet.bind(this);\r\n    this.seeUsers = this.seeUsers.bind(this);\r\n\r\n    // auth\r\n    this.login = this.login.bind(this);\r\n    this.logout = this.logout.bind(this);\r\n\r\n    this.app = firebase;\r\n    //store list of tweets firebase\r\n    this.database = this.app.database().ref().child('tweets');\r\n    //going to setup React state of our component\r\n    this.state = {\r\n      //array of tweets\r\n      tweets: [],\r\n      usersVisible: false,\r\n      user: null,\r\n    }\r\n  }\r\n\r\n  logout() {\r\n    auth.signOut().then(() => {\r\n      this.setState({\r\n        user: null\r\n      });\r\n    });\r\n  }\r\n\r\n  login() {\r\n    auth.signInWithPopup(provider)\r\n      .then((result) => {\r\n        const user = result.user;\r\n        this.setState({\r\n          user\r\n        });\r\n      });\r\n  }\r\n\r\n  componentWillMount(){\r\n    const previousTweets = this.state.tweets;\r\n\r\n    //DataSnapshot\r\n    const username = this.state.user ? this.state.user.displayName : \"\";\r\n\r\n    this.database.on('child_added', snap => {\r\n      previousTweets.unshift({\r\n        id: snap.key,\r\n        tweetContent: snap.val().tweetContent,\r\n        username: snap.val().username,\r\n        timeStamp: snap.val().timeStamp,\r\n      })\r\n\r\n      this.setState({\r\n        tweets: previousTweets\r\n      })\r\n    })\r\n\r\n    this.database.on('child_removed', snap => {\r\n      for(var i=0; i < previousTweets.length; i++){\r\n        if(previousTweets[i].id === snap.key){\r\n          previousTweets.splice(i, 1);\r\n        }\r\n      }\r\n\r\n      this.setState({\r\n        tweets: previousTweets\r\n      })\r\n    })\r\n  }\r\n\r\n  addTweet(tweet, user, time){\r\n    //user entered content pushed onto list in database\r\n    this.database.push().set({tweetContent: tweet, username: user, timeStamp: time});\r\n  }\r\n\r\n  removeTweet(tweetId){\r\n    this.database.child(tweetId).remove();\r\n  }\r\n\r\n  filterTweets(name){\r\n    window.location= '/?user=' + name;\r\n  }\r\n\r\n  seeUsers(){\r\n    this.setState({\r\n      usersVisible: true,\r\n    });\r\n  }\r\n\r\n  constructUsers(){\r\n    var listUsers = [];\r\n    for (var i = 0; i < this.state.tweets.length; i++) {\r\n        listUsers.push(this.state.tweets[i].username);\r\n    }\r\n    var setUsers = new Set(listUsers);\r\n    return setUsers;\r\n  }\r\n\r\n  helper() {\r\n    const query = queryString.parse(window.location.search);\r\n    if(this.state.usersVisible){\r\n      const setUsers = this.constructUsers();\r\n      var usersArray = Array.from(setUsers);\r\n      return(\r\n          usersArray.map((user) => {\r\n            return (<Tweet username={user}/>);\r\n          }\r\n        )\r\n      );\r\n    } else {\r\n      //map each note in tweets array into a tweet component\r\n      return(\r\n        this.state.tweets.map((tweet) => {\r\n          if(!query.user || query.user === tweet.username){\r\n            return (\r\n              <Tweet username={tweet.username} tweetContent={tweet.tweetContent}\r\n              tweetId={tweet.id} key={tweet.id} removeTweet ={this.removeTweet}\r\n              timeStamp={tweet.timeStamp}/>\r\n            );\r\n          }\r\n        })\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"tweetsFooter\">\r\n        <div className=\"tweetsHeader\">\r\n        <div className=\"login\">\r\n          {this.state.user ?\r\n            <button className=\"authentication\" onClick={this.logout}>Log Out</button>\r\n            :\r\n            <button className=\"authentication\" onClick={this.login}>Log In</button>\r\n          }\r\n        </div>\r\n          <div className=\"heading\">Tweets</div>\r\n        </div>\r\n        <div className=\"tweetsBody\">\r\n          {this.helper()}\r\n        </div>\r\n          <button className=\"userButton\"\r\n          onClick={this.seeUsers}>See all users</button>\r\n          <div className=\"tweetsFooter\">\r\n          <TweetForm username = {this.state.user} filterTweets={this.filterTweets} setUser={this.setUser} addTweet={this.addTweet}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}